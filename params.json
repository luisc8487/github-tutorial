{
  "name": "GitHub-tutorial",
  "tagline": "Master Plan",
  "body": "# GitHub Tutorial\r\n\r\n_by Luis Cordero_\r\n\r\n---\r\n## Git vs. GitHub\r\nThe difference between Git and Github \r\n  \r\nGit is basically taking a snapshots of \r\ncode and it doesn't require GitHub. \r\nBut Github requires Git. Github uses \r\nthe [cloud](https://www.thecloud.net/),\r\nan online server to store your work. \r\n\r\n\r\n---\r\n## Initial Setup\r\nGo to [github.com](https://github.com/) sign up. Make sure you sign for **free account**.\r\nAfter doing three step setup, you have just made a github account.  \r\n\r\nKeep in mind to remember your **password** and **username** for your github account. \r\n\r\n![alt text](Screenshot_2016-10-24-11-44-29.png)\r\n\r\nSSH keys are a way to identify trusted computers without involving passwords. \r\n\r\n---\r\n## Repository Setup\r\nHow to create your first repo, only take a few steps. \r\n \r\n First create a new repo on your github account,\r\n as seen on the images below. After giving the repo a name, \r\n keep in mind the folder name of that repo has to be same (_case sensitive_)\r\n within your workspace of that specific folder you'll be working on. \r\n \r\n \r\n![alt text](github-tutorial.jpg)\r\n![alt text](dream.jpg)\r\n\r\nSo now since we're in our workspace within [c9.io](https://c9.io/).\r\nLets create a file called README.md with the use of `touch` command.\r\nBut before you create file `cd` into your file. By the time you cd into your file master branch must appear within bash. This tells the user that the file is a repository or another way you could have create a repository would be `git init`.\r\n\r\n![alt text](github-learning.jpg)\r\n\r\nAfter creating the file, open the file and edit it. \r\nSince you modified your file up to the staging area, in other words `git add [file]`. Git add, adds file to the staging area.\r\n\r\n![alt text](add.jpg)\r\n\r\nNow, `git commit -m \"[message]\"` in order to take a snapshot of any changes to the file/folder. Your last `git push` use the existing repository from the command line or the image above.\r\n\r\n`cd` - change directory\r\n\r\n\r\n`touch` - create file(s)\r\n\r\n\r\n`git init`- create a repo\r\n\r\n\r\n---\r\n## Workflow & Commands\r\n\r\n`git add [file]` - adds file(s) to staging area \r\nto make sure modified files are read already just like this image below \r\n\r\n![alt text](add.jpg)\r\n\r\n`git push` - to push updated files to remote\r\n\r\n\r\n`git commit -m \"[message]\"`- to take a snapshot with a message attached based \r\non the modified file you \"saved\"/ snapped. \r\n\r\n\r\n`git status`- bascially asks the computer for changes you've made to anything in your repo.\r\n\r\nChanges will be in red that aren't on staging area, but if they are in green they are modified files that are on stage.\r\n\r\n![alt text](add.jpg)\r\n\r\n\r\nIf you use all these commands constantly, you pratically can ask what types of changes you've done. Then add all changes, now you can save them. Next your able to push them on to you repository. Anyways, you can constantly \r\nkeep updating you remote online and local workspace, just dont forget to **`git add, git push,  git commit`**. Last tip always \r\nuse **`git status`**. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}